# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

variables:
  applicationUrl: 'http://localhost:4200'
  applicationInstanceName: 'identifier-generator'
  zoneName: 'example-zone'
  zoneDns: 'example-zone.com'
  appName: "$(applicationInstanceName).$(zoneDns)"
  apiName: "api.$(appName)"
  loadBalancerStaticIpName: 'load-balancer-static-ip'
  imageTag: 'initial'
  kubernetesNamespace: 'identifier-generator'

steps:
- task: DownloadBuildArtifacts@0
  displayName: 'Download helmPackage artifact'
  inputs:
    buildType: 'specific'
    project: '793fb093-17e0-4924-82e3-21ba48b0fbd8'
    pipeline: '3'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    downloadType: 'single'
    artifactName: 'helmPackage'
    downloadPath: '$(System.ArtifactsDirectory)'

- task: DownloadBuildArtifacts@0
  displayName: 'Download protractor artifact'
  inputs:
    buildType: 'specific'
    project: '793fb093-17e0-4924-82e3-21ba48b0fbd8'
    pipeline: '3'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    downloadType: 'single'
    artifactName: 'protractor'
    downloadPath: '$(System.ArtifactsDirectory)'

- task: Bash@3
  displayName: 'Move protractor to solution directory'
  inputs:
    targetType: 'inline'
    script: |
      mv $(System.ArtifactsDirectory)/protractor/* $(Build.SourcesDirectory)/
      ls -l $(System.ArtifactsDirectory)/*
      ls -l $(Build.SourcesDirectory)

- task: Npm@1
  enabled: false
  displayName: 'Run npm install'
  inputs:
    workingDir: '$(Build.SourcesDirectory)'
    command: 'install'

- task: Bash@3
  enabled: false
  displayName: 'Update web drivers'
  inputs:
    targetType: 'inline'
    script: |
      node node_modules/protractor/bin/webdriver-manager update

- task: Bash@3
  displayName: 'Install terraform'
  inputs:
    targetType: 'inline'
    script: |
      wget https://releases.hashicorp.com/terraform/0.12.17/terraform_0.12.17_linux_amd64.zip -O terraform.zip
      unzip terraform.zip
      install terraform $(Agent.ToolsDirectory)
      rm terraform.zip
      terraform --version
  
- task: Bash@3
  displayName: 'Install helm tool'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(Agent.BuildDirectory)'
    script: |
      mkdir -p helmTemp
      pushd helmTemp
      wget -qO- https://get.helm.sh/helm-v3.0.1-linux-amd64.tar.gz | tar -zxv
      install $(Agent.BuildDirectory)/helmTemp/linux-amd64/helm $(Agent.ToolsDirectory)
      $(Agent.ToolsDirectory)/helm version

- task: Bash@3
  enabled: false
  displayName: 'Run helm install'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(System.ArtifactsDirectory)/helmPackage'
    script: |
      helm --kubeconfig $(terraformCatalog)/kube.config install identifier-generator-protractor ./identifier-generator-*.tgz \
        --set namespace=$(kubernetesNamespace) \
        --set dockerTag=$(imageTag) \
        --set webapiHost=$(apiName) \
        --set webHost=$(appName)

- task: Bash@3
  enabled: false
  displayName: 'Run terraform plan'
  inputs:
    targetType: 'inline'
    workingDirectory: '$terraformCatalog'
    script: |
      terraform init
      terraform plan \
          -var "credentials_file=$(terraformCatalog)/gcloud-credentials-identifier-generator.json" \
          -var "application_instance_name=$(applicationInstanceName)" \
          -var "zone_dns_name=$(zoneName)" \
          -var "zone_dns=$(zoneDns)." \
          -var "load_balancer_static_ip_name=$(loadBalancerStaticIpName)" \
          -out=plan
      terraform apply plan

- task: Npm@1
  enabled: false
  displayName: 'Run npm e2e'
  inputs:
    command: 'custom'
    workingDir: '$(Build.SourcesDirectory)'
    customCommand: 'run e2e -- --protractor-config=./e2e/protractor-ci.conf.js --base-url=$(applicationUrl) --dev-server-target= --reporters=junit'

- task: Bash@3
  enabled: false
  displayName: 'Run terraform destroy'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(terraformCatalog)'
    script: |
      terraform destroy \
          -var "credentials_file=$(terraformCatalog)/gcloud-credentials-identifier-generator.json" \
          -var "application_instance_name=$(applicationInstanceName)" \
          -var "zone_dns_name=$(zoneName)" \
          -var "zone_dns=$(zoneDns)." \
          -var "load_balancer_static_ip_name=$(loadBalancerStaticIpName)" \
          -auto-approve

- task: PublishTestResults@2
  displayName: 'Publish tests'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: |
      **/TEST-*.xml
      **/TESTS-*.xml
